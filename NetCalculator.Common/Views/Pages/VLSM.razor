@page "/vlsm"
@using NetCalculator.Common.Models.Subnetting.VLSM;
@inherits BaseNetPage

<section class="input">
    <h3 class="title">@Localization.Input</h3>
    <EditForm Model="this" OnValidSubmit="Calculate">
        <DataAnnotationsValidator />
        <div>
            <h5>@Localization.MajorNetwork</h5>
            <InputNetAddress @bind-Value=NetAddress />
        </div>
        <br />
        <div>
            <h5>@Localization.Subnets</h5>
            <table class="subnets">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>@Localization.Name</th>
                        <th>@Localization.Size</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < SubnetInputs.Count; i++)
                    {
                        SubnetInput subnetInput = SubnetInputs[i];
                        <tr>
                            <td>@(i + 1)</td>
                            <td><InputText @bind-Value=subnetInput.Name /></td>
                            <td><InputNumber @bind-Value=subnetInput.HostsWrapper min="1" max="@MAX_SUBNETS_SIZE" /></td>
                            @if (SubnetInputs.Count > 1)
                            {
                                <td>
                                    <button type="button" @onclick="@(_ => DeleteSubnetInput(subnetInput))">
                                        <span class="oi oi-trash" aria-hidden="true" />
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            <div class="number-subnets">
                @Localization.NumberSubnets:
                <InputNumber @bind-Value="SubnetInputCount" min="1" max="@MAX_SUBNET_INPUT_COUNT" />
                <button type="button" @onclick=ChangeSubnetInputCount>@Localization.Change</button>
            </div>
        </div>
        <input type="submit" value="@Localization.Calculate" />
    </EditForm>
</section>

<section id="@RESULT_ID" class="output">
    @if (Result != null)
    {
        <h3 class="title">@Localization.Result</h3>
        <p>
            <h5 class=@(Result.Failed ? "failed" : "success")>
                @(Result.Failed ? Localization.FailedOperation : Localization.SuccessfulOperation)
            </h5>
            @Localization.MajorNetworkIp: @Result.NetAddress.Ip
            <br />
            @Localization.MajorNetworkMask: @Utils.MaskIntToString(Result.NetAddress.Mask) (/@Result.NetAddress.Mask)
            <br />
            @Localization.AvailableAddressesMajorNetwork: @Result.NetAddress.Size
            <br />
            @Localization.NumberAddressesNeeded: @Result.NeededAddresses
            <br />
            @Localization.AvailableAddressesSubnets: @Result.AvailableAddresses
        </p>

        <h5>@Localization.Subnets</h5>
        <ResponsiveTable Titles="SUBNET_RESULT_TABLE_TITLES" Rows="GetSubnetResultTableRows()" />
    }
</section>

@code {
    private const int DEFAULT_SUBNET_INPUT_COUNT = 3;
    private const int MAX_SUBNET_INPUT_COUNT = 999;
    private const int INITIAL_SUBNETS_SIZE = 50;
    private static readonly long MAX_SUBNETS_SIZE = Calculator.MaxNetSize(Calculator.BITS_PER_ADDRESS) - Calculator.RESERVED_ADDRESS_COUNT;
    private static readonly string[] SUBNET_RESULT_TABLE_TITLES =
    {
        "#",
        Localization.Name,
        Localization.Hosts,
        Localization.Address,
        Localization.Mask,
        Localization.FirstHost,
        Localization.LastHost,
        "Broadcast"
    };

    private int SubnetInputCount { get; set; }
    private IList<SubnetInput> SubnetInputs { get; set; }
    private Calculator Calculator { get; set; } = new Calculator();
    private Response Result { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SubnetInputs = new List<SubnetInput>();
        SubnetInputCount = DEFAULT_SUBNET_INPUT_COUNT;
        ChangeSubnetInputCount();
    }

    private void ChangeSubnetInputCount()
    {
        if (0 < SubnetInputCount && SubnetInputCount <= MAX_SUBNET_INPUT_COUNT)
        {
            // Remove excess
            while (SubnetInputCount < SubnetInputs.Count)
                SubnetInputs.RemoveAt(SubnetInputs.Count - 1);

            //Add missing
            while (SubnetInputCount > SubnetInputs.Count)
                AddSubnetInput();
        }
        else
        {
            SubnetInputCount = SubnetInputs.Count;
        }
    }

    private void AddSubnetInput()
    {
        SubnetInputs.Add(new SubnetInput()
        {
            Name = $"LAN {SubnetInputs.Count + 1}",
            Hosts = INITIAL_SUBNETS_SIZE
        });
    }

    private void DeleteSubnetInput(SubnetInput subnetInput)
    {
        SubnetInputs.Remove(subnetInput);
        SubnetInputCount = SubnetInputs.Count;
    }

    private void Calculate()
    {
        Request request = new Request()
        {
            NetAddress = NetAddress.Value,
            Subnets = SubnetInputs.ToArray()
        };

        Result = Calculator.Calculate(request);
        GoToResults();
    }

    private IEnumerable<ResponsiveTable.Row> GetSubnetResultTableRows()
    {
        List<ResponsiveTable.Row> result = new List<ResponsiveTable.Row>();

        for (int i = 0; i < Result.Subnets.Count; i++)
        {
            SubnetResponse subnetOutput = Result.Subnets[i];
            ResponsiveTable.Row row = new ResponsiveTable.Row()
            {
                CssClass = subnetOutput.Overflow ? "failed" : null,
                Columns = new object[]
                {
                    $"{i + 1}",
                    subnetOutput.Name,
                    subnetOutput.Hosts,
                    subnetOutput.Address.Ip,
                    $"{Utils.MaskIntToString(subnetOutput.Address.Mask)} (/{subnetOutput.Address.Mask})",
                    subnetOutput.FirstAssignableAddress,
                    subnetOutput.LastAssignableAddress,
                    subnetOutput.Broadcast
                }
            };

            result.Add(row);
        }

        return result;
    }

    private class SubnetInput : SubnetRequest
    {
        public long HostsWrapper 
        { 
            get => base.Hosts; 
            set => base.Hosts = (uint)Math.Clamp(value, 0, MAX_SUBNETS_SIZE); 
        }
    }
}
