@inherits LayoutComponentBase
@inject JSInterop JSInterop
@inject NavigationManager NavigationManager
@inject SettingsManager SettingsManager

<header>
    <NavMenu Routes="ROUTES" IsDarkMode="DarkModeEnabled" IsDarkModeChanged="OnDarkModeChanged" />
</header>

<main>
    @Body
</main>

@code {
    private static Dictionary<string, string> ROUTES = new Dictionary<string, string>()
    {
        { "net", "Red" },
        { "flsm", "Máscara fija (FLSM)"},
        { "vlsm", "Máscara variable (VLSM)"}
    };

    private bool DarkModeEnabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        DarkModeEnabled = await SettingsManager.GetDarkModeAsync();
        await JSInterop.ChangeThemeAsync(DarkModeEnabled);

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async void OnDarkModeChanged(bool darkModeEnabled)
    {
        DarkModeEnabled = darkModeEnabled;

        await SettingsManager.SetDarkModeAsync(DarkModeEnabled);
        await JSInterop.ChangeThemeAsync(DarkModeEnabled);
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        string relativePath = NavigationManager.ToBaseRelativePath(args.Location);

        if (ROUTES.ContainsKey(relativePath))
        {
            await SettingsManager.SetLastPageAsync(relativePath);
        }
    }
}